import Foundation
import SwiftSyntax

class ConstRewriter: SyntaxRewriter {

    let baseFileURL: URL

    init(_ baseFileURL: URL) {
        self.baseFileURL = baseFileURL

        super.init()
    }

    enum LiteralType: String {
        case text, num
    }

    override func visit(_ node: SourceFileSyntax) -> Syntax {
        var modifiedNode = super.visit(node)

        let aaa = modifiedNode.leadingTrivia?
            .appending(.lineComment("//"))
            .appending(.newlines(1))
            .appending(.lineComment("// DO NOT MODIFY THIS FILE"))
            .appending(.newlines(1))
            .appending(.lineComment("//"))
            .appending(.newlines(1))
            .appending(.lineComment("// This file was automatically generated by SwiftyConst"))
            .appending(.newlines(1))
            .appending(.lineComment("// based on \(baseFileURL.absoluteString)."))
            .appending(.newlines(1))
            .appending(.lineComment("//"))
            .appending(.newlines(2))
        modifiedNode.leadingTrivia = aaa
        return Syntax(modifiedNode)
    }

    override func visit(_ node: IdentifierExprSyntax) -> ExprSyntax {
        let identifier = node.identifier.text

        guard identifier.hasPrefix("__") && identifier.hasSuffix("__") else {
            return ExprSyntax(node)
        }

        // __const__TOKEN__text__ABC__
        // __const__ID__num__0123__
        let commands = identifier.components(separatedBy: "__")
            .filter { !$0.isEmpty }

        guard commands.first == "const",
              commands.count >= 2 else {
            return ExprSyntax(node)
        }

        let enviromentKey = commands[1]
        let value = ProcessInfo.processInfo.environment[enviromentKey]

        if commands.count == 2 {
            let literal = SyntaxFactory.makeStringLiteralExpr(value ?? identifier)
            return ExprSyntax(literal)
        }

        guard let literalType = LiteralType(rawValue: commands[2]) else {
            return ExprSyntax(node)
        }

        switch literalType {
        case .num:
            let hasDefault = commands.count >= 4 && Float(commands[3]) != nil
            let literal: TokenSyntax
            if let _ = value.flatMap(Float.init) {
                literal = SyntaxFactory.makeFloatingLiteral(value!)
            } else if hasDefault {
                literal = SyntaxFactory.makeFloatingLiteral(commands[3])
            } else {
                return ExprSyntax(node)
            }
            let expr = SyntaxFactory.makeFloatLiteralExpr(floatingDigits: literal)
            return ExprSyntax(expr)
        case .text:
            let hasDefault = commands.count >= 4
            if let value = value {
                let expr = SyntaxFactory.makeStringLiteralExpr(value)
                return ExprSyntax(expr)
            } else if hasDefault {
                let expr = SyntaxFactory.makeStringLiteralExpr(commands[3])
                return ExprSyntax(expr)
            }
        }
        return ExprSyntax(node)
    }
}
